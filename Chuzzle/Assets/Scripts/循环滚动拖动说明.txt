=====================================================
🎮 循环滚动拖动效果 - 更新说明
=====================================================

✨ 新功能：头尾相连的平滑拖动体验！
-----------------

现在的拖动系统实现了类似传送带的循环滚动效果：
- 拖动时宝石实时跟随鼠标
- 出边界的宝石从另一边"进入"
- 头尾无缝连接，视觉连续
- 释放时根据距离确认移动几格

🔄 效果演示（向右拖动）：
-----------------

初始状态：
[A][B][C][D][E][F]

拖动0.3格时（实时跟随）：
[F'][A.][B.][C.][D.][E.][.F]
 ↑           
 F的30%从左边进入，右边的F向右移0.3格

拖动0.8格时：
[.F][.A][.B][.C][.D][.E][F']
 ↑
 F大部分在左边了

释放鼠标 → 自动结算：
- 拖动 < 0.6格 → 回弹到原位
- 拖动 0.6-1.5格 → 确认移动1格
- 拖动 1.5-2.5格 → 确认移动2格
- 以此类推...


📝 技术实现：
-----------------

1. Gem.cs 新增功能：
   ✅ basePosition - 基础逻辑位置
   ✅ visualOffset - 临时视觉偏移
   ✅ ApplyVisualOffset() - 应用偏移
   ✅ ResetVisualOffset() - 重置偏移
   ✅ UpdateBasePosition() - 更新基础位置
   ✅ HasVisualOffset() - 检测是否有偏移

2. BoardManager.cs 新增功能：
   ✅ ApplyRowVisualOffset() - 整行视觉偏移（带包裹）
   ✅ ApplyColumnVisualOffset() - 整列视觉偏移（带包裹）
   ✅ ResetRowVisualOffset() - 重置整行偏移
   ✅ ResetColumnVisualOffset() - 重置整列偏移
   ✅ 包裹计算 - 边界循环逻辑

3. InputController.cs 改进：
   ✅ 拖动过程中实时更新视觉偏移
   ✅ 释放时计算总偏移量
   ✅ 根据偏移量确认移动格数
   ✅ 距离不足时回弹


🎯 核心算法：包裹计算（Wrap Around）
-----------------

向右拖动第2行，偏移offset：

for each 宝石 in 第2行:
    displayPos = 基础位置 + offset
    
    if (displayPos.x > 右边界):
        offset.x -= 整行宽度  // 从左边进入
    
    if (displayPos.x < 左边界):
        offset.x += 整行宽度  // 从右边进入
    
    宝石.应用视觉偏移(offset)


🎨 关键改进点：
-----------------

改进前（离散跳格）：
❌ 拖动超过阈值 → 瞬间跳到下一格
❌ 视觉不连续
❌ 看不到循环效果

改进后（连续滚动）：
✅ 拖动实时跟随鼠标
✅ 平滑的视觉反馈
✅ 边缘宝石从另一边"生成"进入
✅ 释放时才确认移动


📊 参数说明：
-----------------

dragThreshold = 0.2
- 拖动多远才判定方向
- 太小 → 容易误触
- 太大 → 不灵敏

moveThreshold = 0.6 （现在主要用于确认移动）
- 释放时，拖动距离 >= 半格才移动
- 使用 Mathf.RoundToInt() 四舍五入

Gem.moveSpeed = 10
- 确认移动后的动画速度
- 越大越快


🎮 使用体验：
-----------------

1. 拖动感觉：
   - 非常流畅
   - 像真实的物理带子
   - 头尾相连的循环感

2. 视觉反馈：
   - 实时跟随鼠标
   - 看得见出界的宝石从另一边进来
   - 释放前就知道会移动几格

3. 操作直觉：
   - 拖多远移多远
   - 不够半格会回弹
   - 可以一次拖多格


💡 调试提示：
-----------------

Console日志会显示：
- "开始拖动宝石: Gem_X_Y_Color at (row, col)"
- "拖动方向: Right, 移动第 X 行"
- "结束拖动，总偏移: X.XX, 应该移动: X 格"
- "确认向右移动第 X 行" 或 "拖动距离不足，回弹"

Scene视图：
- 绿色圆圈 = 选中的宝石
- 红色线 = 拖动轨迹


🐛 可能的问题和解决：
-----------------

Q: 拖动时宝石抖动？
A: 正常现象，因为每帧都在更新位置
   可以降低拖动灵敏度或增加平滑处理

Q: 释放后宝石位置不对？
A: 检查ShiftRow/Column是否正确更新了逻辑位置
   确保ResetVisualOffset在移动前被调用

Q: 看不到循环效果？
A: 检查包裹计算的边界值
   确保宝石大小和间距设置正确

Q: 拖动不跟手？
A: 检查摄像机是否是Orthographic
   确保Z轴坐标设置为0


🚀 性能优化：
-----------------

✅ 只有被拖动的行/列更新位置
✅ 使用视觉偏移，不改变逻辑结构
✅ 释放时才执行真正的移动
✅ 没有创建/销毁对象


📈 后续可以改进：
-----------------

1. 添加弹性动画
   - 释放时有轻微的弹簧效果
   - 使用DOTween或自定义缓动

2. 拖动音效
   - 开始拖动时的音效
   - 滚动过程的音效
   - 确认移动的音效

3. 粒子效果
   - 拖动时的轨迹粒子
   - 循环时的特效

4. 触觉反馈（移动端）
   - 开始拖动震动
   - 每移动一格震动


=====================================================
现在就可以在Unity中测试新的循环滚动效果了！
拖动宝石，体验头尾相连的丝滑感觉！🎮✨
=====================================================


