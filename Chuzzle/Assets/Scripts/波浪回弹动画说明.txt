=====================================================
🌊 波浪回弹动画 - 一个接一个回到原位！
=====================================================

✨ 新功能：丝滑的回弹动画！
-----------------

现在当拖动距离不足时，不再是"瞬间跳回"
而是像波浪一样，宝石一个接一个地滑回原位！


🎬 视觉效果演示：
-----------------

向右拖动0.3格（不够半格）→ 释放鼠标

旧效果（瞬间）：
[F影][A.][B.][C.][D.][E.][.F]
        ↓ 瞬间！
[A][B][C][D][E][F]
❌ 突然跳回，不流畅

新效果（波浪动画）：
[F影][A.][B.][C.][D.][E.][.F]  ← 释放
        ↓
[F影淡][A回][B.][C.][D.][E.][.F]  ← A先开始回弹（0.00秒）
        ↓
[F影淡][A回][B回][C.][D.][E.][.F]  ← B开始回弹（0.03秒后）
        ↓
[F消失][A回][B回][C回][D.][E.][.F]  ← C开始回弹（0.06秒后）
        ↓
[A回][B回][C回][D回][E.][F.]  ← 依次回弹...
        ↓
[A][B][C][D][E][F]  ← 全部回到原位！

✅ 像波浪一样，从一边滑到另一边！
✅ 影子同时淡出消失！
✅ 超级流畅！


🔑 核心技术：
-----------------

1. Gem.cs 新增回弹系统：
   ✅ isBouncing - 回弹状态标志
   ✅ bounceDelay - 每个宝石的延迟
   ✅ bounceTimer - 回弹进度计时
   ✅ bounceDuration - 回弹持续时间（0.3秒）
   ✅ StartBounceBack(delay) - 开始回弹

2. 回弹曲线：
   EaseOut - 快速开始，慢慢结束
   公式：1 - (1 - t)³
   
   结果：
   - 前30%的时间 → 回弹60%的距离
   - 后70%的时间 → 回弹剩余40%
   - 自然、流畅的减速感

3. 延迟计算：
   向右拖动回弹：
   - 第0列：延迟 0.00秒（最先回弹）
   - 第1列：延迟 0.03秒
   - 第2列：延迟 0.06秒
   - 第3列：延迟 0.09秒
   - 第4列：延迟 0.12秒
   - 第5列：延迟 0.15秒（最后回弹）
   
   向左拖动回弹：
   - 顺序反过来，从右边开始

4. 影子淡出：
   回弹的同时，影子alpha从0.8淡到0
   最后自动销毁


💡 波浪方向逻辑：
-----------------

向右拖动 → 从左边开始回弹
- 第一个回弹的是最左边的宝石
- 波浪从左到右传递
- 符合"推出去，拉回来"的物理直觉

向左拖动 → 从右边开始回弹
- 第一个回弹的是最右边的宝石
- 波浪从右到左传递

向上拖动 → 从下边开始回弹
向下拖动 → 从上边开始回弹


⚙️ 参数调整：
-----------------

在 Gem.cs 中：
- bounceDuration = 0.3f
  ✓ 0.2f → 更快回弹
  ✓ 0.5f → 更慢、更优雅

在 BoardManager.cs 中：
- delayIncrement = 0.03f
  ✓ 0.02f → 波浪更快
  ✓ 0.05f → 波浪更慢、更明显

推荐组合：
- 快速：duration=0.2, delay=0.02
- 标准：duration=0.3, delay=0.03 ✅
- 优雅：duration=0.5, delay=0.04


🎯 对比表格：
-----------------

| 特性 | 旧版（瞬间） | 新版（波浪） |
|------|-------------|-------------|
| 回弹方式 | 瞬间跳回 | 平滑动画 |
| 宝石顺序 | 同时 | 一个接一个 |
| 影子处理 | 突然消失 | 淡出 |
| 视觉效果 | 僵硬 | 流畅 |
| 波浪感 | ❌ 无 | ✅ 有 |
| 优雅度 | ⭐⭐ | ⭐⭐⭐⭐⭐ |


🔍 技术细节：
-----------------

Update() 中的优先级：
1. isBouncing（最高）- 回弹动画
2. hasVisualOffset - 拖动偏移
3. isMoving - 确认移动动画

回弹动画流程：
```csharp
StartBounceBack(delay) →
    设置：isBouncing = true
    保存：bounceStartOffset = 当前偏移
    
Update每帧：
    等待delay →
    计算进度progress（0→1）→
    应用EaseOut曲线 →
    插值：当前偏移 = Lerp(起始偏移, 0, 进度) →
    影子淡出：alpha = Lerp(0.8, 0, 进度) →
    
progress达到1.0 →
    完成！销毁影子
```


🌟 视觉细节：
-----------------

1. 回弹曲线（EaseOut）
   0% ━━━━━━━━━━━━━━ 起始位置
   30% ━━━━━━━━━•     快速移动60%
   60% ━━━━━━•        减速
   90% ━━━━•          更慢
   100% ━━━•          到达原位

2. 影子淡出
   开始：alpha = 0.8（稍透明）
   过程：逐渐降低
   结束：alpha = 0（完全透明）
   然后：销毁GameObject

3. 延迟链
   宝石0: ▬▬▬▬▬▬ 0.00s开始
   宝石1:    ▬▬▬▬▬▬ 0.03s开始
   宝石2:       ▬▬▬▬▬▬ 0.06s开始
   ...
   
   总时间 = 0.15s（延迟）+ 0.3s（动画）= 0.45s


🎮 用户体验：
-----------------

玩家感受：
1. 拖动不够远 → 释放
2. 看到宝石依次回弹
3. 像多米诺骨牌倒回去
4. 像波浪在流动
5. 😍 "哇，好流畅！"

心理效果：
✅ 不会觉得突兀
✅ 视觉上很舒服
✅ 有"物理真实感"
✅ 增加游戏品质感


📊 性能说明：
-----------------

计算开销：
✅ 很小（只是Lerp插值）
✅ 每帧只更新正在回弹的宝石
✅ 没有额外的GameObject创建

内存开销：
✅ 几乎无（只是几个float变量）

GC压力：
✅ 无（没有new操作）


🐛 注意事项：
-----------------

1. 回弹中不能拖动
   ✅ 已处理：IsAnyGemMoving()包含IsBouncing()
   ✅ 回弹完成前无法新拖动

2. 影子自动清理
   ✅ 回弹完成后自动DestroyShadow()
   ✅ 不会有残留

3. 状态管理
   ✅ 回弹完成后重置所有标志
   ✅ 不会出现卡住的情况


🎨 可选增强（未来）：
-----------------

1. 弹性回弹
   - 稍微超过原位，再弹回来
   - 使用EaseOutBack曲线

2. 音效
   - 回弹开始：轻微"咔"声
   - 回弹结束：落位"啪"声
   - 每个宝石错开，形成节奏

3. 粒子效果
   - 回弹时的轨迹粒子
   - 到位时的小星星


📝 总结：
-----------------

核心改进：
- 从"瞬间跳回" → "波浪回弹"
- 从"同时重置" → "依次回弹"
- 从"生硬消失" → "平滑淡出"

效果：
✅ 超级流畅
✅ 视觉舒适
✅ 有物理真实感
✅ 大幅提升游戏品质


🚀 现在测试：
-----------------

1. 运行Unity
2. 拖动一行宝石（不要超过半格）
3. 释放鼠标
4. 观察：
   ✅ 宝石一个接一个回弹
   ✅ 像波浪从一边传到另一边
   ✅ 影子平滑淡出
   ✅ 整体超级丝滑！

这就是真正的"波浪回弹"效果！🌊


=====================================================
完美的回弹动画！
像波浪、像多米诺、像真实的物理世界！✨
=====================================================

